generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  role      String   @default("user")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  orderes   Order[]
}

model Product {
  id                Int            @id @default(autoincrement())
  name              String
  description       String?
  price             Float
  currentStock      Int            @default(0)
  lowStockThreshold Int?           @default(5) // Define when the stock is considered low
  stockHistory      StockHistory[]
  batches           ProductBatch[]
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
}

model StockHistory {
  id         Int             @id @default(autoincrement())
  product    Product         @relation(fields: [productId], references: [id])
  productId  Int
  changeType StockChangeType
  quantity   Int
  userId     Int // The user/admin who made the change
  createdAt  DateTime        @default(now())
}

model ProductBatch {
  id          Int       @id @default(autoincrement())
  product     Product   @relation(fields: [productId], references: [id])
  productId   Int
  batchNumber String
  expiryDate  DateTime?
  quantity    Int       @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Order {
  id          Int         @id @default(autoincrement())
  user        User        @relation(fields: [userId], references: [id])
  userId      Int
  items       Json // Storing the order items as JSON for flexibility (or you could create an OrderItem model)
  totalAmount Float
  status      OrderStatus @default(PENDING) // Enum to track order status
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  deliveries Delivery[] // One-to-many relation with Delivery
}

model Delivery {
  id             Int            @id @default(autoincrement())
  order          Order          @relation(fields: [orderId], references: [id])
  orderId        Int
  deliveryStatus DeliveryStatus @default(PENDING)
  deliveryDate   DateTime?
  trackingNumber String?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum DeliveryStatus {
  PENDING
  OUT_FOR_DELIVERY
  DELIVERED
  FAILED
}

enum StockChangeType {
  ADD
  REMOVE
}
