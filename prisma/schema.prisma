// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  role      String   @default("user")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  orderes   Order[]
}

model Product {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  price       Float
  stock       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Order {
  id          Int         @id @default(autoincrement())
  user        User        @relation(fields: [userId], references: [id])
  userId      Int
  items       Json // Storing the order items as JSON for flexibility (or you could create an OrderItem model)
  totalAmount Float
  status      OrderStatus @default(PENDING) // Enum to track order status
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  deliveries Delivery[] // One-to-many relation with Delivery
}

model Delivery {
  id             Int            @id @default(autoincrement())
  order          Order          @relation(fields: [orderId], references: [id])
  orderId        Int
  deliveryStatus DeliveryStatus @default(PENDING)
  deliveryDate   DateTime?
  trackingNumber String?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum DeliveryStatus {
  PENDING
  OUT_FOR_DELIVERY
  DELIVERED
  FAILED
}
